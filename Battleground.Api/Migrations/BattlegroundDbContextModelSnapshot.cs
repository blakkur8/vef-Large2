// <auto-generated />
using System;
using Battleground.Repositories.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Battleground.Api.Migrations
{
    [DbContext(typeof(BattlegroundDbContext))]
    partial class BattlegroundDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Battleground.Repositories.Entities.Attacks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BattleId")
                        .HasColumnType("integer");

                    b.Property<string>("BattlePokemonIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CriticalHit")
                        .HasColumnType("boolean");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BattleId", "BattlePokemonIdentifier");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.BattlePlayer", b =>
                {
                    b.Property<int>("PlayerInMatchId")
                        .HasColumnType("integer");

                    b.Property<int>("BattleId")
                        .HasColumnType("integer");

                    b.HasKey("PlayerInMatchId", "BattleId");

                    b.HasIndex("BattleId");

                    b.ToTable("BattlePlayer");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.BattlePokemons", b =>
                {
                    b.Property<int>("BattleId")
                        .HasColumnType("integer");

                    b.Property<string>("PokemonIdentifier")
                        .HasColumnType("text");

                    b.HasKey("BattleId", "PokemonIdentifier");

                    b.ToTable("BattlePokemons");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.Battles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.BattleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BattleStatus");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.PlayerInventories", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("PokemonIdentifier")
                        .HasColumnType("text");

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId", "PokemonIdentifier");

                    b.ToTable("PlayerInventories");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.Players", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.Attacks", b =>
                {
                    b.HasOne("Battleground.Repositories.Entities.BattlePokemons", "Battle")
                        .WithMany("Attacks")
                        .HasForeignKey("BattleId", "BattlePokemonIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.BattlePlayer", b =>
                {
                    b.HasOne("Battleground.Repositories.Entities.Battles", "Battle")
                        .WithMany("Battle")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battleground.Repositories.Entities.Players", "PlayerInMatch")
                        .WithMany("PlayerInMatch")
                        .HasForeignKey("PlayerInMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("PlayerInMatch");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.BattlePokemons", b =>
                {
                    b.HasOne("Battleground.Repositories.Entities.Battles", "Battle")
                        .WithMany()
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.Battles", b =>
                {
                    b.HasOne("Battleground.Repositories.Entities.BattleStatus", "Status")
                        .WithMany("Battles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battleground.Repositories.Entities.Players", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("Status");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.PlayerInventories", b =>
                {
                    b.HasOne("Battleground.Repositories.Entities.Players", "Player")
                        .WithMany("Inventories")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.BattlePokemons", b =>
                {
                    b.Navigation("Attacks");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.Battles", b =>
                {
                    b.Navigation("Battle");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.BattleStatus", b =>
                {
                    b.Navigation("Battles");
                });

            modelBuilder.Entity("Battleground.Repositories.Entities.Players", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PlayerInMatch");
                });
#pragma warning restore 612, 618
        }
    }
}
